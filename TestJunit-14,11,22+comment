package com.adecco.sistemaCoda;

import static org.junit.Assert.*;


//Attenzione*****
//nonostante nel git di Roberto vi siano gli import(nel junit "Test")
//(quelli prima di public class)
//fare attenzione a metterli poichè delle volte l'inserimento di questi
//provoca "error" non permettendo di effettuare i test
//consiglio di provare prima senza e implementarli successivamente qualora il test
//non andasse

public class Test {

	@org.junit.Test
	public void test() {
		assertTrue(2 == 1 + 1);
	}
	//questo è il secondo test
	//notare come ogni nuovo test inizi con @org.junit
	
	@org.junit.Test
	public void pluto() {
		assertFalse(2 == 1 + 3);
	}
	
	@org.junit.Test
	public void testPersona() {
		
		Persona persona =  new Persona("rossi", 18);
		
		// asserisco che il cognome della persona sia rossi
		// e che l'eta sia 18
		assertEquals(persona.getCognome(), "rossi");
		assertEquals(persona.getEta(), 18);

		assertFalse(persona.getEta() > 30);
		//qui invece sto dicendo di asserire che sia il risultato sia falso 
	    //qualora l'età sia maggiore di 30
		
	}
	
	@org.junit.Test
	public void testCoda() {
	
		Coda coda = new Coda();
		
		//asserisci che coda non sia null. ergo che questa abbia un valore
		
		assertNotNull(coda);
	    
		//asserisco che coda con la funzione contaPersoneInCoda sia guale a zero
		
		assertTrue(coda.contaPersoneInCoda() == 0);
	    
		//assegno un nuovo valore a Persona
		
		Persona p1 = new Persona("verdi", 20);
		Persona p2 = new Persona("giallini", 20);

		coda.aggiungiPersona(p1);
		assertTrue(coda.contaPersoneInCoda() == 1);
		assertEquals(coda.getPersone().get(0),p1);
		
		assertNotEquals(coda.getPersone().get(0),p2);
		
        //asserisci che in coda.getPersone l'oggetto p2(ovvero il nuovo valore di Persona)
		//non possa essere uguale alla posizione  0
		//questo perchè p1(valore dichiarato alla riga 57)
		//è nella posizione 0
		
		coda.aggiungiPersona(p2);
		assertEquals(coda.getPersone().get(1),p2);

		
		
		assertEquals(coda.restituisciProssimo(),p1);
		assertEquals(coda.restituisciProssimo(),p2);
		assertTrue(coda.contaPersoneInCoda() == 0);

		//assert : letteralmengte asserisce che tale cosa sia vera(ci possono essere vari tipi di assert es: assertFalse
		//in questo caso il test va da public alla fine della parentesi, per fare vari test basta 
		//inizializzare un altro metodo
		//per iniziare un altro test bisogna rispettare la notazione di junit ovvero; 
		//inserendo prima della funzione
		//@org.junit.Test(test è il nome usato da noi in questo specifico caso
		//potrebbe anche essere : @org.junit.Banana
	
	}
	
	
	@org.junit.Test
	public void testCodaConPriorita() {
		
		
		System.out.println("OK INIZIO TEST");
		
		
		CodaConPriorita codaConPriorita =
				new CodaConPriorita();
		
		Persona p1 = new Persona("verdi", 20);
		Persona p2 = new Persona("giallini", 20);
		Persona p3 = new Persona("gg", 20);
		Persona p4 = new Persona("bianchi", 80);
		
		System.out.println("stampo persone");
		System.out.println(p1);
		System.out.println(p2);
		System.out.println(p3);
		System.out.println(p4);

		
		codaConPriorita.aggiungiPersona(p1);
		codaConPriorita.aggiungiPersona(p2);
		codaConPriorita.aggiungiPersona(p3);
		codaConPriorita.aggiungiPersona(p4);

		
		assertEquals(codaConPriorita.restituisciProssimo(), p4);
		assertEquals(codaConPriorita.restituisciProssimo(), p1);
		assertEquals(codaConPriorita.restituisciProssimo(), p2);
		assertEquals(codaConPriorita.restituisciProssimo(), p3);


		
	}
	
	
	
	
	
	
	
}

